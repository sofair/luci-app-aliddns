#!/bin/sh

NAME=aliddns
log_file=/var/log/$NAME.log

uci_get_by_name() {
	local ret=$(uci get $NAME.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

intelnetip() {
	tmp_ip=`curl -sL --connect-timeout 3   ns1.dnspod.net:6666`
	if [ "Z$tmp_ip" == "Z" ]; then
		tmp_ip=`curl -sL --connect-timeout 3 members.3322.org/dyndns/getip`
	fi
	if [ "Z$tmp_ip" == "Z" ]; then
		tmp_ip=`curl -sL --connect-timeout 3 14.215.150.17:6666`
	fi
	if [ "Z$tmp_ip" == "Z" ]; then
		tmp_ip=`curl -sL --connect-timeout 3 whatismyip.akamai.com`
	fi
	echo -n $tmp_ip
}

resolve2ip() {
	# resolve2ip domain<string>
	domain=$1
	tmp_ip=`nslookup    $domain ns1.alidns.com 2>/dev/null | sed '/^Server/d; /#53$/d' | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | tail -n1`
	if [ "Z$tmp_ip" == "Z" ]; then
		tmp_ip=`nslookup $domain ns2.alidns.com  2>/dev/null | sed '/^Server/d; /#53$/d' | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | tail -n1`
	fi
	if [ "Z$tmp_ip" == "Z" ]; then
		tmp_ip=`nslookup $domain 114.114.115.115 2>/dev/null | sed '/^Server/d; /#53$/d' | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | tail -n1`
	fi
	if [ "Z$tmp_ip" == "Z" ]; then
        if [ "$webdumptool" == "curl" ]; then
            tmp_ip=`curl -sL --connect-timeout 3 "119.29.29.29/d?dn=$domain"`
        else
            tmp_ip=`webdump -R -t 3 119.29.29.29 80 GET "/d?dn=$domain"`
        fi
	fi
	echo -n $tmp_ip
}

check_aliddns() {
	echo "$DATE WAN-IP: ${ip}"
	if [ "Z$ip" == "Z" ]; then
		echo "$DATE ERROR, cant get WAN-IP..."
		return 0
	fi
	current_ip=$(resolve2ip "$sub_dm.$main_dm")
	if [ "Z$current_ip" == "Z" ]; then
		rrid='' # NO Resolve IP Means new Record_ID
	fi
	echo "$DATE DOMAIN-IP: ${current_ip}"
	if [ "Z$ip" == "Z$current_ip" ]; then
		echo "$DATE IP dont need UPDATE..."
		return 0
	else
		echo "$DATE UPDATING..."
		return 1
	fi
}

urlencode() {
	# urlencode url<string>
	out=''
	for c in $(echo -n $1 | sed 's/[^\n]/&\n/g'); do
		case $c in
			[a-zA-Z0-9._-]) out="$out$c" ;;
			*) out="$out$(printf '%%%02X' "'$c")" ;;
		esac
	done
	echo -n $out
}

send_request() {
	# send_request action<string> args<string>
	local args="AccessKeyId=$ak_id&Action=$1&Format=json&$2&Version=2015-01-09"
    local hash=
    if [ "$signtool" == "openssl" ]; then
        hash=$(urlencode $(echo -n "GET&%2F&$(urlencode $args)" | openssl dgst -sha1 -hmac "$ak_sec&" -binary | openssl base64))
    else
        hash=$(urlencode $(echo -n "GET&%2F&$(urlencode $args)" | sha1_hmac "$ak_sec&" -base64))
    fi
    if [ "$webdumptool" == "curl" ]; then
        curl -sSL --connect-timeout 5 "http://alidns.aliyuncs.com/?$args&Signature=$hash"
    else
        webdump -R alidns.aliyuncs.com 80 GET "/?$args&Signature=$hash"
    fi
}

get_recordid() {
	sed -n 's/.*RecordId[^0-9]*\([0-9]*\).*/\1/p'
}

query_recordid() {
	send_request "DescribeSubDomainRecords" "SignatureMethod=HMAC-SHA1&SignatureNonce=$timestamp&SignatureVersion=1.0&SubDomain=$sub_dm.$main_dm&Timestamp=$timestamp"
}

update_record() {
	send_request "UpdateDomainRecord" "RR=$sub_dm&RecordId=$1&SignatureMethod=HMAC-SHA1&SignatureNonce=$timestamp&SignatureVersion=1.0&Timestamp=$timestamp&Type=A&Value=$ip"
}

add_record() {
	send_request "AddDomainRecord&DomainName=$main_dm" "RR=$sub_dm&SignatureMethod=HMAC-SHA1&SignatureNonce=$timestamp&SignatureVersion=1.0&Timestamp=$timestamp&Type=A&Value=$ip"
}

do_ddns_record() {
	if [ "Z$rrid" == "Z" ]; then
		rrid=`query_recordid | get_recordid`
	fi
	if [ "Z$rrid" == "Z" ]; then
		rrid=`add_record | get_recordid`
		echo "$DATE ADD record $rrid"
	else
		update_record $rrid >/dev/null 2>&1
		echo "$DATE UPDATE record $rrid"
	fi
	if [ "Z$rrid" == "Z" ]; then
		# failed
		echo "$DATE # ERROR, Please Check Config/Time"
	else
		# save rrid
		uci set aliddns.base.record_id_$sub_dm=$rrid
		uci commit aliddns
		echo "$DATE # UPDATED($ip)"
	fi
}

clean_log() {
	if [ $(cat $log_file 2>/dev/null | wc -l) -ge 16 ]; then
		rm -f $log_file && touch $log_file
		echo "$DATE Log Cleaned"
	fi
}

signtool=
[ -x /usr/bin/openssl ] && signtool=openssl
[ -z "$signtool" ] && [ -x /bin/sha1_hmac ] && signtool=sha1_hmac

webdumptool=
[ -x /usr/bin/curl ] && webdumptool=curl
[ -z "$webdumptool" ] && [ -x /bin/webdump ] && webdumptool=webdump

sedtool=
[ -x /bin/sed ] && sedtool=sed

[ -z "$signtool" -o -z "$webdumptool" -o -z "$sedtool" ] || ( echo "Need [ openssl|sha1_hmac + curl|webdump + sed ]" && exit 1 )

ak_id=$(uci_get_by_name   base app_key)
ak_sec=$(uci_get_by_name  base app_secret)
#rrid=$(uci_get_by_name    base record_id)
main_dm=$(uci_get_by_name base main_domain)
all_sub_dm=$(uci_get_by_name  base sub_domain)

iface=$(uci_get_by_name   base interface)
if [ "Z$iface" == "Zinternet" -o "Z$iface" == "Z" ]; then
	ip=$(intelnetip)
else
	ip=$(ubus call network.interface.$iface status | grep '"address"' | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
fi

DATE=$(date +'%Y-%m-%d %H:%M:%S')
timestamp=$(date -u "+%Y-%m-%dT%H%%3A%M%%3A%SZ")

clean_log
for sub_dm in $(echo "$all_sub_dm")
do
rrid=$(uci_get_by_name    base "record_id_$sub_dm")
check_aliddns || do_ddns_record
done
